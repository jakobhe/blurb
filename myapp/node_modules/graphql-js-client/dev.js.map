{"version":3,"file":"dev.js","sources":["src/join.js","src/is-object.js","src/deep-freeze-copy-except.js","src/schema-for-type.js","src/variable.js","src/enum.js","src/scalar.js","src/format-input-value.js","src/format-object.js","src/format-args.js","src/noop.js","src/track-type-dependency.js","src/selection-set.js","src/operation.js","src/query.js","src/mutation.js","src/document.js","src/graph-model.js","src/class-registry.js","src/is-value.js","src/is-node-context.js","src/transform-connection.js","src/decode.js","src/http-fetcher.js","src/client.js","src/client-dev.js"],"sourcesContent":["export default function join(...fields) {\n  return fields.join(' ');\n}\n","export default function isObject(value) {\n  return Boolean(value) && Object.prototype.toString.call(value.valueOf()) === '[object Object]';\n}\n","import isObject from './is-object';\n\nexport default function deepFreezeCopyExcept(predicate, structure) {\n  if (predicate(structure)) {\n    return structure;\n  } else if (isObject(structure)) {\n    return Object.freeze(Object.keys(structure).reduce((copy, key) => {\n      copy[key] = deepFreezeCopyExcept(predicate, structure[key]);\n\n      return copy;\n    }, {}));\n  } else if (Array.isArray(structure)) {\n    return Object.freeze(structure.map((item) => deepFreezeCopyExcept(predicate, item)));\n  } else {\n    return structure;\n  }\n}\n","export default function schemaForType(typeBundle, typeName) {\n  const type = typeBundle.types[typeName];\n\n  if (type) {\n    return type;\n  }\n\n  throw new Error(`No type of ${typeName} found in schema`);\n}\n\n","import formatInputValue from './format-input-value';\n\nexport class VariableDefinition {\n\n  /**\n   * This constructor should not be invoked directly.\n   * Use the factory function {@link Client#variable} to create a VariableDefinition.\n   *\n   * @param {String} name The name of the variable.\n   * @param {String} type The GraphQL type of the variable.\n   * @param {*} [defaultValue] The default value of the variable.\n   */\n  constructor(name, type, defaultValue) {\n    this.name = name;\n    this.type = type;\n    this.defaultValue = defaultValue;\n    Object.freeze(this);\n  }\n\n  /**\n   * Returns the GraphQL query string for the variable as an input value (e.g. `$variableName`).\n   *\n   * @return {String} The GraphQL query string for the variable as an input value.\n   */\n  toInputValueString() {\n    return `$${this.name}`;\n  }\n\n  /**\n   * Returns the GraphQL query string for the variable (e.g. `$variableName:VariableType = defaultValue`).\n   *\n   * @return {String} The GraphQL query string for the variable.\n   */\n  toString() {\n    const defaultValueString = this.defaultValue ? ` = ${formatInputValue(this.defaultValue)}` : '';\n\n    return `$${this.name}:${this.type}${defaultValueString}`;\n  }\n}\n\nexport function isVariable(value) {\n  return value instanceof VariableDefinition;\n}\n\nexport default function variable(name, type, defaultValue) {\n  return new VariableDefinition(name, type, defaultValue);\n}\n","export class Enum {\n\n  /**\n   * This constructor should not be invoked directly.\n   * Use the factory function {@link Client#enum} to create an Enum.\n   *\n   * @param {String} key The key of the enum.\n   */\n  constructor(key) {\n    this.key = key;\n  }\n\n  /**\n   * Returns the GraphQL query string for the enum (e.g. `enumKey`).\n   *\n   * @return {String} The GraphQL query string for the enum.\n   */\n  toString() {\n    return this.key;\n  }\n\n  valueOf() {\n    return this.key.valueOf();\n  }\n}\n\nexport default (key) => {\n  return new Enum(key);\n};\n","export default class Scalar {\n  constructor(value) {\n    this.value = value;\n  }\n\n  toString() {\n    return this.value.toString();\n  }\n\n  valueOf() {\n    return this.value.valueOf();\n  }\n\n  get unwrapped() {\n    return this.value;\n  }\n}\n","import formatObject from './format-object';\nimport isObject from './is-object';\nimport join from './join';\nimport {VariableDefinition} from './variable';\nimport {Enum} from './enum';\nimport Scalar from './scalar';\n\nexport default function formatInputValue(value) {\n  if (VariableDefinition.prototype.isPrototypeOf(value)) {\n    return value.toInputValueString();\n  } else if (Enum.prototype.isPrototypeOf(value)) {\n    return String(value);\n  } else if (Scalar.prototype.isPrototypeOf(value)) {\n    return JSON.stringify(value.valueOf());\n  } else if (Array.isArray(value)) {\n    return `[${join(...value.map(formatInputValue))}]`;\n  } else if (isObject(value)) {\n    return formatObject(value, '{', '}');\n  } else {\n    return JSON.stringify(value);\n  }\n}\n","import formatInputValue from './format-input-value';\nimport join from './join';\n\nexport default function formatObject(value, openChar = '', closeChar = '') {\n  const argPairs = Object.keys(value).map((key) => {\n    return `${key}: ${formatInputValue(value[key])}`;\n  });\n\n  return `${openChar}${join(...argPairs)}${closeChar}`;\n}\n","import formatObject from './format-object';\n\nexport default function formatArgs(args) {\n  if (!Object.keys(args).length) {\n    return '';\n  }\n\n  return ` (${formatObject(args)})`;\n}\n","// eslint-disable-next-line no-empty-function\nexport default () => {};\n","let types = {};\nlet fields = {};\nlet tracking = false;\n\nfunction trackTypeDependency(typeName) {\n  if (!tracking) {\n    return;\n  }\n\n  types[typeName] = true;\n}\n\nfunction trackFieldDependency(typeName, fieldName) {\n  if (!tracking) {\n    return;\n  }\n\n  if (!fields[typeName]) {\n    fields[typeName] = {};\n  }\n\n  fields[typeName][fieldName] = true;\n}\n\nexport function resetTracker() {\n  types = {};\n  fields = {};\n  tracking = false;\n}\n\nexport function startTracking() {\n  tracking = true;\n}\n\nexport function pauseTracking() {\n  tracking = false;\n}\n\nexport function trackedTypes() {\n  return Object.keys(types).sort();\n}\n\nexport function printTypes() {\n  // eslint-disable-next-line\n  console.log(trackedTypes().join());\n}\n\nexport function trackedFields() {\n  return Object.getOwnPropertyNames(fields).reduce((acc, key) => {\n    acc[key] = Object.getOwnPropertyNames(fields[key]);\n\n    return acc;\n  }, {});\n}\n\nconst Tracker = {trackTypeDependency, trackFieldDependency};\n\nexport default Tracker;\n","import deepFreezeCopyExcept from './deep-freeze-copy-except';\nimport join from './join';\nimport schemaForType from './schema-for-type';\nimport formatArgs from './format-args';\nimport noop from './noop';\nimport {isVariable} from './variable';\nimport Tracker from './track-type-dependency';\n\nconst {trackTypeDependency, trackFieldDependency} = Tracker;\n\nfunction parseFieldCreationArgs(creationArgs) {\n  let callback = noop;\n  let options = {};\n  let selectionSet = null;\n\n  if (creationArgs.length === 2) {\n    if (typeof creationArgs[1] === 'function') {\n      [options, callback] = creationArgs;\n    } else {\n      [options, selectionSet] = creationArgs;\n    }\n  } else if (creationArgs.length === 1) {\n    // SelectionSet is defined before this function is called since it's\n    // called by SelectionSet\n    // eslint-disable-next-line no-use-before-define\n    if (SelectionSet.prototype.isPrototypeOf(creationArgs[0])) {\n      selectionSet = creationArgs[0];\n    } else if (typeof creationArgs[0] === 'function') {\n      callback = creationArgs[0];\n    } else {\n      options = creationArgs[0];\n    }\n  }\n\n  return {options, selectionSet, callback};\n}\n\nconst emptyArgs = Object.freeze({});\n\nexport class Field {\n\n  /**\n   * This constructor should not be invoked directly.\n   * Fields are added to a selection by {@link SelectionSetBuilder#add}, {@link SelectionSetBuilder#addConnection}\n   * and {@link SelectionSetBuilder#addInlineFragmentOn}.\n   *\n   * @param {String} name The name of the field.\n   * @param {Object} [options] An options object containing:\n   *   @param {Object} [options.args] Arguments for the field.\n   *   @param {String} [options.alias] An alias for the field.\n   * @param {SelectionSet} selectionSet The selection set on the field.\n   */\n  constructor(name, options, selectionSet) {\n    this.name = name;\n    this.alias = options.alias || null;\n    this.responseKey = this.alias || this.name;\n    this.args = (options.args ? deepFreezeCopyExcept(isVariable, options.args) : emptyArgs);\n    this.selectionSet = selectionSet;\n    Object.freeze(this);\n  }\n\n  /**\n   * Returns the GraphQL query string for the Field (e.g. `catAlias: cat(size: 'small') { name }` or `name`).\n   *\n   * @return {String} The GraphQL query string for the Field.\n   */\n  toString() {\n    const aliasPrefix = this.alias ? `${this.alias}: ` : '';\n\n    return `${aliasPrefix}${this.name}${formatArgs(this.args)}${this.selectionSet}`;\n  }\n}\n\n// This is an interface that defines a usage, and simplifies type checking\nexport class Spread {}\n\nexport class InlineFragment extends Spread {\n\n  /**\n   * This constructor should not be invoked directly.\n   * Use the factory function {@link SelectionSetBuilder#addInlineFragmentOn} to create an InlineFragment.\n   *\n   * @param {String} typeName The type of the fragment.\n   * @param {SelectionSet} selectionSet The selection set on the fragment.\n   */\n  constructor(typeName, selectionSet) {\n    super();\n    this.typeName = typeName;\n    this.selectionSet = selectionSet;\n    Object.freeze(this);\n  }\n\n  /**\n   * Returns the GraphQL query string for the InlineFragment (e.g. `... on Cat { name }`).\n   *\n   * @return {String} The GraphQL query string for the InlineFragment.\n   */\n  toString() {\n    return `... on ${this.typeName}${this.selectionSet}`;\n  }\n}\n\nexport class FragmentSpread extends Spread {\n\n  /**\n   * This constructor should not be invoked directly.\n   * Use the factory function {@link Document#defineFragment} to create a FragmentSpread.\n   *\n   * @param {FragmentDefinition} fragmentDefinition The corresponding fragment definition.\n   */\n  constructor(fragmentDefinition) {\n    super();\n    this.name = fragmentDefinition.name;\n    this.selectionSet = fragmentDefinition.selectionSet;\n    Object.freeze(this);\n  }\n\n  /**\n   * Returns the GraphQL query string for the FragmentSpread (e.g. `...catName`).\n   *\n   * @return {String} The GraphQL query string for the FragmentSpread.\n   */\n  toString() {\n    return `...${this.name}`;\n  }\n}\n\nexport class FragmentDefinition {\n\n  /**\n   * This constructor should not be invoked directly.\n   * Use the factory function {@link Document#defineFragment} to create a FragmentDefinition on a {@link Document}.\n   *\n   * @param {String} name The name of the fragment definition.\n   * @param {String} typeName The type of the fragment.\n   */\n  constructor(name, typeName, selectionSet) {\n    this.name = name;\n    this.typeName = typeName;\n    this.selectionSet = selectionSet;\n    this.spread = new FragmentSpread(this);\n    Object.freeze(this);\n  }\n\n  /**\n   * Returns the GraphQL query string for the FragmentDefinition (e.g. `fragment catName on Cat { name }`).\n   *\n   * @return {String} The GraphQL query string for the FragmentDefinition.\n   */\n  toString() {\n    return `fragment ${this.name} on ${this.typeName} ${this.selectionSet}`;\n  }\n}\n\nfunction selectionsHaveIdField(selections) {\n  return selections.some((fieldOrFragment) => {\n    if (Field.prototype.isPrototypeOf(fieldOrFragment)) {\n      return fieldOrFragment.name === 'id';\n    } else if (Spread.prototype.isPrototypeOf(fieldOrFragment) && fieldOrFragment.selectionSet.typeSchema.implementsNode) {\n      return selectionsHaveIdField(fieldOrFragment.selectionSet.selections);\n    }\n\n    return false;\n  });\n}\n\nfunction selectionsHaveTypenameField(selections) {\n  return selections.some((fieldOrFragment) => {\n    if (Field.prototype.isPrototypeOf(fieldOrFragment)) {\n      return fieldOrFragment.name === '__typename';\n    } else if (Spread.prototype.isPrototypeOf(fieldOrFragment) && fieldOrFragment.selectionSet.typeSchema.implementsNode) {\n      return selectionsHaveTypenameField(fieldOrFragment.selectionSet.selections);\n    }\n\n    return false;\n  });\n}\n\nfunction indexSelectionsByResponseKey(selections) {\n  function assignOrPush(obj, key, value) {\n    if (Array.isArray(obj[key])) {\n      obj[key].push(value);\n    } else {\n      obj[key] = [value];\n    }\n  }\n  const unfrozenObject = selections.reduce((acc, selection) => {\n    if (selection.responseKey) {\n      assignOrPush(acc, selection.responseKey, selection);\n    } else {\n      const responseKeys = Object.keys(selection.selectionSet.selectionsByResponseKey);\n\n      responseKeys.forEach((responseKey) => {\n        assignOrPush(acc, responseKey, selection);\n      });\n    }\n\n    return acc;\n  }, {});\n\n  Object.keys(unfrozenObject).forEach((key) => {\n    Object.freeze(unfrozenObject[key]);\n  });\n\n  return Object.freeze(unfrozenObject);\n}\n\n/**\n * Class that specifies the full selection of data to query.\n */\nexport default class SelectionSet {\n\n  /**\n   * This constructor should not be invoked directly. SelectionSets are created when building queries/mutations.\n   *\n   * @param {Object} typeBundle A set of ES6 modules generated by {@link https://github.com/Shopify/graphql-js-schema|graphql-js-schema}.\n   * @param {(Object|String)} type The type of the current selection.\n   * @param {Function} builderFunction Callback function used to build the SelectionSet.\n   *   The callback takes a {@link SelectionSetBuilder} as its argument.\n   */\n  constructor(typeBundle, type, builderFunction) {\n\n    if (typeof type === 'string') {\n      this.typeSchema = schemaForType(typeBundle, type);\n    } else {\n      this.typeSchema = type;\n    }\n\n    trackTypeDependency(this.typeSchema.name);\n\n    this.typeBundle = typeBundle;\n    this.selections = [];\n    if (builderFunction) {\n      // eslint-disable-next-line no-use-before-define\n      builderFunction(new SelectionSetBuilder(this.typeBundle, this.typeSchema, this.selections));\n    }\n\n    if (this.typeSchema.implementsNode || this.typeSchema.name === 'Node') {\n      if (!selectionsHaveIdField(this.selections)) {\n        this.selections.unshift(new Field('id', {}, new SelectionSet(typeBundle, 'ID')));\n      }\n    }\n\n    if (this.typeSchema.kind === 'INTERFACE') {\n      if (!selectionsHaveTypenameField(this.selections)) {\n        this.selections.unshift(new Field('__typename', {}, new SelectionSet(typeBundle, 'String')));\n      }\n    }\n\n    this.selectionsByResponseKey = indexSelectionsByResponseKey(this.selections);\n    Object.freeze(this.selections);\n    Object.freeze(this);\n  }\n\n  /**\n   * Returns the GraphQL query string for the SelectionSet (e.g. `{ cat { name } }`).\n   *\n   * @return {String} The GraphQL query string for the SelectionSet.\n   */\n  toString() {\n    if (this.typeSchema.kind === 'SCALAR' || this.typeSchema.kind === 'ENUM') {\n      return '';\n    } else {\n      return ` { ${join(this.selections)} }`;\n    }\n  }\n}\n\n/**\n * Class used to help build a {@link SelectionSet}.\n */\nclass SelectionSetBuilder {\n\n  /**\n   * This constructor should not be invoked directly. SelectionSetBuilders are created when building queries/mutations.\n   *\n   * @param {Object} typeBundle A set of ES6 modules generated by {@link https://github.com/Shopify/graphql-js-schema|graphql-js-schema}.\n   * @param {Object} typeSchema The schema object for the type of the current selection.\n   * @param {Field[]} selections The fields on the current selection.\n   */\n  constructor(typeBundle, typeSchema, selections) {\n    this.typeBundle = typeBundle;\n    this.typeSchema = typeSchema;\n    this.selections = selections;\n  }\n\n  hasSelectionWithResponseKey(responseKey) {\n    return this.selections.some((field) => {\n      return field.responseKey === responseKey;\n    });\n  }\n\n  /**\n   * Adds a field to be queried on the current selection.\n   *\n   * @example\n   * client.query((root) => {\n   *   root.add('cat', {args: {id: '123456'}, alias: 'meow'}, (cat) => {\n   *     cat.add('name');\n   *   });\n   * });\n   *\n   * @param {SelectionSet|String} selectionOrFieldName The selection or name of the field to add.\n   * @param {Object} [options] Options on the query including:\n   *   @param {Object} [options.args] Arguments on the query (e.g. `{id: '123456'}`).\n   *   @param {String} [options.alias] Alias for the field being added.\n   * @param {Function|SelectionSet} [callbackOrSelectionSet] Either a callback which will be used to create a new {@link SelectionSet}, or an existing {@link SelectionSet}.\n   */\n  add(selectionOrFieldName, ...rest) {\n    let selection;\n\n    if (Object.prototype.toString.call(selectionOrFieldName) === '[object String]') {\n      trackFieldDependency(this.typeSchema.name, selectionOrFieldName);\n\n      selection = this.field(selectionOrFieldName, ...rest);\n    } else {\n      if (Field.prototype.isPrototypeOf(selectionOrFieldName)) {\n        trackFieldDependency(this.typeSchema.name, selectionOrFieldName.name);\n      }\n\n      selection = selectionOrFieldName;\n    }\n\n    if (selection.responseKey && this.hasSelectionWithResponseKey(selection.responseKey)) {\n      throw new Error(`The field name or alias '${selection.responseKey}' has already been added.`);\n    }\n    this.selections.push(selection);\n  }\n\n  field(name, ...creationArgs) {\n    const parsedArgs = parseFieldCreationArgs(creationArgs);\n    const {options, callback} = parsedArgs;\n    let {selectionSet} = parsedArgs;\n\n    if (!selectionSet) {\n      if (!this.typeSchema.fieldBaseTypes[name]) {\n        throw new Error(`No field of name \"${name}\" found on type \"${this.typeSchema.name}\" in schema`);\n      }\n\n      const fieldBaseType = schemaForType(this.typeBundle, this.typeSchema.fieldBaseTypes[name]);\n\n      selectionSet = new SelectionSet(this.typeBundle, fieldBaseType, callback);\n    }\n\n    return new Field(name, options, selectionSet);\n  }\n\n  /**\n   * Creates an inline fragment.\n   *\n   * @access private\n   * @param {String} typeName The type  the inline fragment.\n   * @param {Function|SelectionSet}  [callbackOrSelectionSet] Either a callback which will be used to create a new {@link SelectionSet}, or an existing {@link SelectionSet}.\n   * @return {InlineFragment} An inline fragment.\n   */\n  inlineFragmentOn(typeName, builderFunctionOrSelectionSet = noop) {\n    let selectionSet;\n\n    if (SelectionSet.prototype.isPrototypeOf(builderFunctionOrSelectionSet)) {\n      selectionSet = builderFunctionOrSelectionSet;\n    } else {\n      selectionSet = new SelectionSet(\n        this.typeBundle,\n        schemaForType(this.typeBundle, typeName),\n        builderFunctionOrSelectionSet\n      );\n    }\n\n    return new InlineFragment(typeName, selectionSet);\n  }\n\n  /**\n   * Adds a field to be queried on the current selection.\n   *\n   * @access private\n   * @param {String}    name The name of the field to add to the query.\n   * @param {Object} [options] Options on the query including:\n   *   @param {Object} [options.args] Arguments on the query (e.g. `{id: '123456'}`).\n   *   @param {String} [options.alias] Alias for the field being added.\n   * @param {Function}  [callback] Callback which will be used to create a new {@link SelectionSet} for the field added.\n   */\n  addField(name, ...creationArgs) {\n    this.add(name, ...creationArgs);\n  }\n\n  /**\n   * Adds a connection to be queried on the current selection.\n   * This adds all the fields necessary for pagination.\n   *\n   * @example\n   * client.query((root) => {\n   *   root.add('cat', (cat) => {\n   *     cat.addConnection('friends', {args: {first: 10}, alias: 'coolCats'}, (friends) => {\n   *       friends.add('name');\n   *     });\n   *   });\n   * });\n   *\n   * @param {String}    name The name of the connection to add to the query.\n   * @param {Object} [options] Options on the query including:\n   *   @param {Object} [options.args] Arguments on the query (e.g. `{first: 10}`).\n   *   @param {String} [options.alias] Alias for the field being added.\n   * @param {Function|SelectionSet}  [callbackOrSelectionSet] Either a callback which will be used to create a new {@link SelectionSet}, or an existing {@link SelectionSet}.\n   */\n  addConnection(name, ...creationArgs) {\n    const {options, callback, selectionSet} = parseFieldCreationArgs(creationArgs);\n\n    this.add(name, options, (connection) => {\n      connection.add('pageInfo', {}, (pageInfo) => {\n        pageInfo.add('hasNextPage');\n        pageInfo.add('hasPreviousPage');\n      });\n      connection.add('edges', {}, (edges) => {\n        edges.add('cursor');\n        edges.addField('node', {}, (selectionSet || callback)); // This is bad. Don't do this\n      });\n    });\n  }\n\n  /**\n   * Adds an inline fragment on the current selection.\n   *\n   * @example\n   * client.query((root) => {\n   *   root.add('animal', (animal) => {\n   *     animal.addInlineFragmentOn('cat', (cat) => {\n   *       cat.add('name');\n   *     });\n   *   });\n   * });\n   *\n   * @param {String} typeName The name of the type of the inline fragment.\n   * @param {Function|SelectionSet}  [callbackOrSelectionSet] Either a callback which will be used to create a new {@link SelectionSet}, or an existing {@link SelectionSet}.\n   */\n  addInlineFragmentOn(typeName, fieldTypeCb = noop) {\n    this.add(this.inlineFragmentOn(typeName, fieldTypeCb));\n  }\n\n  /**\n   * Adds a fragment spread on the current selection.\n   *\n   * @example\n   * client.query((root) => {\n   *   root.addFragment(catFragmentSpread);\n   * });\n   *\n   * @param {FragmentSpread} fragmentSpread The fragment spread to add.\n   */\n  addFragment(fragmentSpread) {\n    this.add(fragmentSpread);\n  }\n}\n","import join from './join';\nimport SelectionSet from './selection-set';\nimport schemaForType from './schema-for-type';\n\nfunction parseArgs(args) {\n  let name;\n  let variables;\n  let selectionSetCallback;\n\n  if (args.length === 3) {\n    [name, variables, selectionSetCallback] = args;\n  } else if (args.length === 2) {\n    if (Object.prototype.toString.call(args[0]) === '[object String]') {\n      name = args[0];\n      variables = null;\n    } else if (Array.isArray(args[0])) {\n      variables = args[0];\n      name = null;\n    }\n\n    selectionSetCallback = args[1];\n  } else {\n    selectionSetCallback = args[0];\n    name = null;\n  }\n\n  return {name, variables, selectionSetCallback};\n}\n\nclass VariableDefinitions {\n  constructor(variableDefinitions) {\n    this.variableDefinitions = variableDefinitions ? [...variableDefinitions] : [];\n    Object.freeze(this.variableDefinitions);\n    Object.freeze(this);\n  }\n\n  toString() {\n    if (this.variableDefinitions.length === 0) {\n      return '';\n    }\n\n    return ` (${join(this.variableDefinitions)}) `;\n  }\n}\n\n/**\n * Base class for {@link Query} and {@link Mutation}.\n * @abstract\n */\nexport default class Operation {\n\n  /**\n   * This constructor should not be invoked. The subclasses {@link Query} and {@link Mutation} should be used instead.\n   */\n  constructor(typeBundle, operationType, ...args) {\n    const {name, variables, selectionSetCallback} = parseArgs(args);\n\n    this.typeBundle = typeBundle;\n    this.name = name;\n    this.variableDefinitions = new VariableDefinitions(variables);\n    this.operationType = operationType;\n    if (operationType === 'query') {\n      this.selectionSet = new SelectionSet(typeBundle, typeBundle.queryType, selectionSetCallback);\n      this.typeSchema = schemaForType(typeBundle, typeBundle.queryType);\n    } else {\n      this.selectionSet = new SelectionSet(typeBundle, typeBundle.mutationType, selectionSetCallback);\n      this.typeSchema = schemaForType(typeBundle, typeBundle.mutationType);\n    }\n    Object.freeze(this);\n  }\n\n  /**\n   * Whether the operation is anonymous (i.e. has no name).\n   */\n  get isAnonymous() {\n    return !this.name;\n  }\n\n  /**\n   * Returns the GraphQL query or mutation string (e.g. `query myQuery { cat { name } }`).\n   *\n   * @return {String} The GraphQL query or mutation string.\n   */\n  toString() {\n    const nameString = (this.name) ? ` ${this.name}` : '';\n\n    return `${this.operationType}${nameString}${this.variableDefinitions}${this.selectionSet}`;\n  }\n}\n","import Operation from './operation';\n\n/**\n * GraphQL Query class.\n * @extends Operation\n */\nexport default class Query extends Operation {\n\n  /**\n   * This constructor should not be invoked directly.\n   * Use the factory functions {@link Client#query} or {@link Document#addQuery} to create a Query.\n   *\n   * @param {Object} typeBundle A set of ES6 modules generated by {@link https://github.com/Shopify/graphql-js-schema|graphql-js-schema}.\n   * @param {String} [name] A name for the query.\n   * @param {Object[]} [variables] A list of variables in the query. See {@link Client#variable}.\n   * @param {Function} selectionSetCallback The query builder callback.\n   *   A {@link SelectionSet} is created using this callback.\n   */\n  constructor(typeBundle, ...args) {\n    super(typeBundle, 'query', ...args);\n  }\n}\n","import Operation from './operation';\n\n/**\n * GraphQL Mutation class.\n * @extends Operation\n */\nexport default class Mutation extends Operation {\n\n  /**\n   * This constructor should not be invoked directly.\n   * Use the factory functions {@link Client#mutation} or {@link Document#addMutation} to create a Mutation.\n   *\n   * @param {Object} typeBundle A set of ES6 modules generated by {@link https://github.com/Shopify/graphql-js-schema|graphql-js-schema}.\n   * @param {String} [name] A name for the mutation.\n   * @param {Object[]} [variables] A list of variables in the mutation. See {@link Client#variable}.\n   * @param {Function} selectionSetCallback The mutation builder callback.\n   *   A {@link SelectionSet} is created using this callback.\n   */\n  constructor(typeBundle, ...args) {\n    super(typeBundle, 'mutation', ...args);\n  }\n}\n","import Query from './query';\nimport Mutation from './mutation';\nimport Operation from './operation';\nimport join from './join';\nimport SelectionSet, {FragmentDefinition} from './selection-set';\n\nfunction isAnonymous(operation) {\n  return operation.isAnonymous;\n}\n\nfunction hasAnonymousOperations(operations) {\n  return operations.some(isAnonymous);\n}\n\nfunction hasDuplicateOperationNames(operations) {\n  const names = operations.map((operation) => operation.name);\n\n  return names.reduce((hasDuplicates, name, index) => {\n    return hasDuplicates || names.indexOf(name) !== index;\n  }, false);\n}\n\nfunction extractOperation(typeBundle, operationType, ...args) {\n  if (Operation.prototype.isPrototypeOf(args[0])) {\n    return args[0];\n  }\n\n  if (operationType === 'query') {\n    return new Query(typeBundle, ...args);\n  } else {\n    return new Mutation(typeBundle, ...args);\n  }\n}\n\nfunction isInvalidOperationCombination(operations) {\n  if (operations.length === 1) {\n    return false;\n  }\n\n  return hasAnonymousOperations(operations) || hasDuplicateOperationNames(operations);\n}\n\nfunction fragmentNameIsNotUnique(existingDefinitions, name) {\n  return existingDefinitions.some((definition) => (definition.name === name));\n}\n\nexport default class Document {\n\n  /**\n   * This constructor should not be invoked directly.\n   * Use the factory function {@link Client#document} to create a Document.\n   * @param {Object} typeBundle A set of ES6 modules generated by {@link https://github.com/Shopify/graphql-js-schema|graphql-js-schema}.\n   */\n  constructor(typeBundle) {\n    this.typeBundle = typeBundle;\n    this.definitions = [];\n  }\n\n  /**\n   * Returns the GraphQL query string for the Document (e.g. `query queryOne { ... } query queryTwo { ... }`).\n   *\n   * @return {String} The GraphQL query string for the Document.\n   */\n  toString() {\n    return join(this.definitions);\n  }\n\n  /**\n   * Adds an operation to the Document.\n   *\n   * @private\n   * @param {String} operationType The type of the operation. Either 'query' or 'mutation'.\n   * @param {(Operation|String)} [query|queryName] Either an instance of an operation\n   *   object, or the name of an operation. Both are optional.\n   * @param {Object[]} [variables] A list of variables in the operation. See {@link Client#variable}.\n   * @param {Function} [callback] The query builder callback. If an operation\n   *   instance is passed, this callback will be ignored.\n   *   A {@link SelectionSet} is created using this callback.\n\n   */\n  addOperation(operationType, ...args) {\n    const operation = extractOperation(this.typeBundle, operationType, ...args);\n\n    if (isInvalidOperationCombination(this.operations.concat(operation))) {\n      throw new Error('All operations must be uniquely named on a multi-operation document');\n    }\n\n    this.definitions.push(operation);\n  }\n\n  /**\n   * Adds a query to the Document.\n   *\n   * @example\n   * document.addQuery('myQuery', (root) => {\n   *   root.add('cat', (cat) => {\n   *    cat.add('name');\n   *   });\n   * });\n   *\n   * @param {(Query|String)} [query|queryName] Either an instance of a query\n   *   object, or the name of a query. Both are optional.\n   * @param {Object[]} [variables] A list of variables in the query. See {@link Client#variable}.\n   * @param {Function} [callback] The query builder callback. If a query\n   *   instance is passed, this callback will be ignored.\n   *   A {@link SelectionSet} is created using this callback.\n   */\n  addQuery(...args) {\n    this.addOperation('query', ...args);\n  }\n\n  /**\n   * Adds a mutation to the Document.\n   *\n   * @example\n   * const input = client.variable('input', 'CatCreateInput!');\n   *\n   * document.addMutation('myMutation', [input], (root) => {\n   *   root.add('catCreate', {args: {input}}, (catCreate) => {\n   *     catCreate.add('cat', (cat) => {\n   *       cat.add('name');\n   *     });\n   *   });\n   * });\n   *\n   * @param {(Mutation|String)} [mutation|mutationName] Either an instance of a mutation\n   *   object, or the name of a mutation. Both are optional.\n   * @param {Object[]} [variables] A list of variables in the mutation. See {@link Client#variable}.\n   * @param {Function} [callback] The mutation builder callback. If a mutation\n   *   instance is passed, this callback will be ignored.\n   *   A {@link SelectionSet} is created using this callback.\n   */\n  addMutation(...args) {\n    this.addOperation('mutation', ...args);\n  }\n\n  /**\n   * Defines a fragment on the Document.\n   *\n   * @param {String} name The name of the fragment.\n   * @param {String} onType The type the fragment is on.\n   * @param {Function} [builderFunction] The query builder callback.\n   *   A {@link SelectionSet} is created using this callback.\n   * @return {FragmentSpread} A {@link FragmentSpread} to be used with {@link SelectionSetBuilder#addFragment}.\n   */\n  defineFragment(name, onType, builderFunction) {\n    if (fragmentNameIsNotUnique(this.fragmentDefinitions, name)) {\n      throw new Error('All fragments must be uniquely named on a multi-fragment document');\n    }\n\n    const selectionSet = new SelectionSet(this.typeBundle, onType, builderFunction);\n    const fragment = new FragmentDefinition(name, onType, selectionSet);\n\n    this.definitions.push(fragment);\n\n    return fragment.spread;\n  }\n\n  /**\n   * All operations ({@link Query} and {@link Mutation}) on the Document.\n   */\n  get operations() {\n    return this.definitions.filter((definition) => Operation.prototype.isPrototypeOf(definition));\n  }\n\n  /**\n   * All {@link FragmentDefinition}s on the Document.\n   */\n  get fragmentDefinitions() {\n    return this.definitions.filter((definition) => FragmentDefinition.prototype.isPrototypeOf(definition));\n  }\n}\n","/**\n * The base class used when deserializing response data.\n * Provides rich features, like functions to generate queries to refetch a node or fetch the next page.\n *\n * @class\n */\nexport default class GraphModel {\n\n  /**\n   * @param {Object} attrs Attributes on the GraphModel.\n   */\n  constructor(attrs) {\n    this.attrs = attrs;\n\n    Object.keys(this.attrs).filter((key) => {\n      return !(key in this);\n    }).forEach((key) => {\n      let descriptor;\n\n      if (attrs[key] === null) {\n        descriptor = {\n          get() {\n            return null;\n          }\n        };\n      } else {\n        descriptor = {\n          get() {\n            return this.attrs[key].valueOf();\n          }\n        };\n      }\n      Object.defineProperty(this, key, descriptor);\n    });\n  }\n}\n","import GraphModel from './graph-model';\n\n/**\n * A registry of classes used to deserialize the response data. Uses {@link GraphModel} by default.\n */\nexport default class ClassRegistry {\n  constructor() {\n    this.classStore = {};\n  }\n\n  /**\n   * Registers a class for a GraphQL type in the registry.\n   *\n   * @param {Class} constructor The constructor of the class.\n   * @param {String} type The GraphQL type of the object to deserialize into the class.\n   */\n  registerClassForType(constructor, type) {\n    this.classStore[type] = constructor;\n  }\n\n  /**\n   * Unregisters a class for a GraphQL type in the registry.\n   *\n   * @param {String} type The GraphQL type to unregister.\n   */\n  unregisterClassForType(type) {\n    delete this.classStore[type];\n  }\n\n  /**\n   * Returns the class for the given GraphQL type.\n   *\n   * @param {String} type The GraphQL type to look up.\n   * @return {Class|GraphModel} The class for the given GraphQL type. Defaults to {@link GraphModel} if no class is registered for the GraphQL type.\n   */\n  classForType(type) {\n    return this.classStore[type] || GraphModel;\n  }\n}\n","export default function isValue(arg) {\n  return Object.prototype.toString.call(arg) !== '[object Null]' && Object.prototype.toString.call(arg) !== '[object Undefined]';\n}\n","export default function isNodeContext(context) {\n  return context.selection.selectionSet.typeSchema.implementsNode;\n}\n","import Query from './query';\nimport isNodeContext from './is-node-context';\nimport variable from './variable';\nimport Scalar from './scalar';\n\nfunction isConnection(context) {\n  return context.selection.selectionSet.typeSchema.name.endsWith('Connection');\n}\n\nfunction nearestNode(context) {\n  if (context == null) {\n    return null;\n  } else if (isNodeContext(context)) {\n    return context;\n  } else {\n    return nearestNode(context.parent);\n  }\n}\n\nfunction contextsFromRoot(context) {\n  if (context.parent) {\n    return contextsFromRoot(context.parent).concat(context);\n  } else {\n    return [context];\n  }\n}\n\nfunction contextsFromNearestNode(context) {\n  if (context.selection.selectionSet.typeSchema.implementsNode) {\n    return [context];\n  } else {\n    return contextsFromNearestNode(context.parent).concat(context);\n  }\n}\n\nfunction addNextFieldTo(currentSelection, contextChain, cursor, path) {\n  // There are always at least two. When we start, it's the root context, and the first set\n  const nextContext = contextChain.shift();\n\n  path.push(nextContext.selection.responseKey);\n\n  if (contextChain.length) {\n    currentSelection.add(nextContext.selection.name, {alias: nextContext.selection.alias, args: nextContext.selection.args}, (newSelection) => {\n      addNextFieldTo(newSelection, contextChain, cursor, path);\n    });\n  } else {\n    const edgesField = nextContext.selection.selectionSet.selections.find((field) => {\n      return field.name === 'edges';\n    });\n    const nodeField = edgesField.selectionSet.selections.find((field) => {\n      return field.name === 'node';\n    });\n    const first = variable('first', 'Int', nextContext.selection.args.first);\n    const options = {\n      alias: nextContext.selection.alias,\n      args: Object.assign({}, nextContext.selection.args, {after: cursor, first})\n    };\n\n    currentSelection.addConnection(nextContext.selection.name, options, nodeField.selectionSet);\n  }\n}\n\nfunction nextPageQueryAndPath(context, cursor) {\n  const nearestNodeContext = nearestNode(context);\n  const path = [];\n\n  if (nearestNodeContext) {\n    return function() {\n      const nodeType = nearestNodeContext.selection.selectionSet.typeSchema;\n      const nodeId = nearestNodeContext.responseData.id;\n      const contextChain = contextsFromNearestNode(context);\n      const first = contextChain[contextChain.length - 1].selection.args.first;\n\n      const query = new Query(context.selection.selectionSet.typeBundle, [variable('first', 'Int', first)], (root) => {\n        path.push('node');\n        root.add('node', {args: {id: nodeId}}, (node) => {\n          node.addInlineFragmentOn(nodeType.name, (fragment) => {\n            addNextFieldTo(fragment, contextChain.slice(1), cursor, path);\n          });\n        });\n      });\n\n      return [query, path];\n    };\n  } else {\n    return function() {\n      const contextChain = contextsFromRoot(context);\n      const first = contextChain[contextChain.length - 1].selection.args.first;\n\n      const query = new Query(context.selection.selectionSet.typeBundle, [variable('first', 'Int', first)], (root) => {\n        addNextFieldTo(root, contextChain.slice(1), cursor, path);\n      });\n\n      return [query, path];\n    };\n  }\n}\n\nfunction hasNextPage(connection, edge) {\n  if (edge !== connection.edges[connection.edges.length - 1]) {\n    return new Scalar(true);\n  }\n\n  return connection.pageInfo.hasNextPage;\n}\n\nfunction hasPreviousPage(connection, edge) {\n  if (edge !== connection.edges[0]) {\n    return new Scalar(true);\n  }\n\n  return connection.pageInfo.hasPreviousPage;\n}\n\nexport default function transformConnections(context, value) {\n  if (isConnection(context)) {\n    if (!(value.pageInfo && value.pageInfo.hasOwnProperty('hasNextPage') && value.pageInfo.hasOwnProperty('hasPreviousPage'))) {\n      throw new Error('Connections must include the selections \"pageInfo { hasNextPage, hasPreviousPage }\".');\n    }\n\n    return value.edges.map((edge) => {\n      return Object.assign(edge.node, {\n        nextPageQueryAndPath: nextPageQueryAndPath(context, edge.cursor),\n        hasNextPage: hasNextPage(value, edge),\n        hasPreviousPage: hasPreviousPage(value, edge)\n      });\n    });\n  } else {\n    return value;\n  }\n}\n","/* eslint-disable no-warning-comments */\nimport ClassRegistry from './class-registry';\nimport {Field, Spread} from './selection-set';\nimport Query from './query';\nimport isObject from './is-object';\nimport isValue from './is-value';\nimport isNodeContext from './is-node-context';\nimport transformConnections from './transform-connection';\nimport schemaForType from './schema-for-type';\nimport Scalar from './scalar';\nimport {Enum} from './enum';\n\nclass DecodingContext {\n  constructor(selection, responseData, parent = null) {\n    this.selection = selection;\n    this.responseData = responseData;\n    this.parent = parent;\n    Object.freeze(this);\n  }\n\n  contextForObjectProperty(responseKey) {\n    const nestedSelections = this.selection.selectionSet.selectionsByResponseKey[responseKey];\n    const nextSelection = nestedSelections && nestedSelections[0];\n    let nextContext;\n\n    // fragment spreads operate inside the current context, so we recurse to get the proper\n    // selection set, but retain the current response context\n    if (Spread.prototype.isPrototypeOf(nextSelection)) {\n      nextContext = new DecodingContext(nextSelection, this.responseData, this.parent);\n    } else {\n      nextContext = new DecodingContext(nextSelection, this.responseData[responseKey], this);\n    }\n\n    if (!nextSelection) {\n      throw new Error(`Unexpected response key \"${responseKey}\", not found in selection set: ${this.selection.selectionSet}`);\n    }\n\n    if (Field.prototype.isPrototypeOf(nextSelection)) {\n      return nextContext;\n    } else {\n      return nextContext.contextForObjectProperty(responseKey);\n    }\n  }\n\n  contextForArrayItem(item) {\n    return new DecodingContext(this.selection, item, this.parent);\n  }\n}\n\nfunction decodeArrayItems(context, transformers) {\n  return context.responseData.map((item) => decodeContext(context.contextForArrayItem(item), transformers));\n}\n\nfunction decodeObjectValues(context, transformers) {\n  return Object.keys(context.responseData).reduce((acc, responseKey) => {\n    acc[responseKey] = decodeContext(context.contextForObjectProperty(responseKey), transformers);\n\n    return acc;\n  }, {});\n}\n\nfunction runTransformers(transformers, context, value) {\n  return transformers.reduce((acc, transformer) => {\n    return transformer(context, acc);\n  }, value);\n}\n\nfunction decodeContext(context, transformers) {\n  let value = context.responseData;\n\n  if (Array.isArray(value)) {\n    value = decodeArrayItems(context, transformers);\n  } else if (isObject(value)) {\n    value = decodeObjectValues(context, transformers);\n  }\n\n  return runTransformers(transformers, context, value);\n}\n\nfunction generateRefetchQueries(context, value) {\n  if (isValue(value) && isNodeContext(context)) {\n    value.refetchQuery = function() {\n      return new Query(context.selection.selectionSet.typeBundle, (root) => {\n        root.add('node', {args: {id: context.responseData.id}}, (node) => {\n          node.addInlineFragmentOn(context.selection.selectionSet.typeSchema.name, context.selection.selectionSet);\n        });\n      });\n    };\n  }\n\n  return value;\n}\n\nfunction transformPojosToClassesWithRegistry(classRegistry) {\n  return function transformPojosToClasses(context, value) {\n    if (isObject(value)) {\n      const Klass = classRegistry.classForType(context.selection.selectionSet.typeSchema.name);\n\n      return new Klass(value);\n    } else {\n      return value;\n    }\n  };\n}\n\nfunction transformScalars(context, value) {\n  if (isValue(value)) {\n    if (context.selection.selectionSet.typeSchema.kind === 'SCALAR') {\n      return new Scalar(value);\n    } else if (context.selection.selectionSet.typeSchema.kind === 'ENUM') {\n      return new Enum(value);\n    }\n  }\n\n  return value;\n}\n\nfunction recordTypeInformation(context, value) {\n  if (isValue(value)) {\n    if (value.__typename) {\n      value.type = schemaForType(context.selection.selectionSet.typeBundle, value.__typename);\n    } else {\n      value.type = context.selection.selectionSet.typeSchema;\n    }\n  }\n\n  return value;\n}\n\nfunction defaultTransformers({classRegistry = new ClassRegistry()}) {\n  return [\n    transformScalars,\n    generateRefetchQueries,\n    transformConnections,\n    recordTypeInformation,\n    transformPojosToClassesWithRegistry(classRegistry)\n  ];\n}\n\n/**\n * A function used to decode the response data.\n *\n * @function decode\n * @param {SelectionSet} selection The selection set used to query the response data.\n * @param {Object} responseData The response data returned.\n * @param {Object} [options] Options to use when decoding including:\n *   @param {ClassRegistry} [options.classRegistry] A class registry to use when deserializing the data into classes.\n * @return {GraphModel} The decoded response data.\n */\nexport default function decode(selection, responseData, options = {}) {\n  const transformers = options.transformers || defaultTransformers(options);\n  const context = new DecodingContext(selection, responseData);\n\n  return decodeContext(context, transformers);\n}\n","export default function httpFetcher(url, options = {}) {\n  return function fetcher(graphQLParams) {\n    return fetch(url, {\n      body: JSON.stringify(graphQLParams),\n      method: 'POST',\n      mode: 'cors',\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        ...options.headers\n      }\n    }).then((response) => response.json());\n  };\n}\n","import Document from './document';\nimport Query from './query';\nimport Mutation from './mutation';\nimport Operation from './operation';\nimport decode from './decode';\nimport ClassRegistry from './class-registry';\nimport httpFetcher from './http-fetcher';\nimport enumFunction from './enum';\nimport variableFunction from './variable';\n\nexport {default as GraphModel} from './graph-model';\nexport {ClassRegistry};\nexport {default as decode} from './decode';\n\nfunction hasNextPage(paginatedModels) {\n  return paginatedModels && paginatedModels.length && paginatedModels[paginatedModels.length - 1].hasNextPage;\n}\n\n/**\n * The Client class used to create and send GraphQL documents, fragments, queries and mutations.\n */\nexport default class Client {\n\n  /**\n   * @param {Object} typeBundle A set of ES6 modules generated by {@link https://github.com/Shopify/graphql-js-schema|graphql-js-schema}.\n   * @param {Object} options An options object. Must include either `url` and optional `fetcherOptions` OR a `fetcher` function.\n   *   @param {(String|Function)} options.url|fetcher Either the URL of the GraphQL API endpoint, or a custom fetcher function for further customization.\n   *   @param {Object} [options.fetcherOptions] Additional options to use with `fetch`, like headers. Do not specify this argument if `fetcher` is specified.\n   *   @param {ClassRegistry} [options.registry=new ClassRegistry()] A {@link ClassRegistry} used to decode the response data.\n   */\n  constructor(typeBundle, {url, fetcherOptions, fetcher, registry = new ClassRegistry()}) {\n    this.typeBundle = typeBundle;\n    this.classRegistry = registry;\n\n    if (url && fetcher) {\n      throw new Error('Arguments not supported: supply either `url` and optional `fetcherOptions` OR use a `fetcher` function for further customization.');\n    }\n\n    if (url) {\n      this.fetcher = httpFetcher(url, fetcherOptions);\n    } else if (fetcher) {\n      if (fetcherOptions) {\n        throw new Error('Arguments not supported: when specifying your own `fetcher`, set options through it and not with `fetcherOptions`');\n      }\n\n      this.fetcher = fetcher;\n    } else {\n      throw new Error('Invalid arguments: one of `url` or `fetcher` is needed.');\n    }\n  }\n\n  /**\n   * Creates a GraphQL document.\n   *\n   * @example\n   * const document = client.document();\n   *\n   * @return {Document} A GraphQL document.\n   */\n  document() {\n    return new Document(this.typeBundle);\n  }\n\n  /**\n   * Creates a GraphQL query.\n   *\n   * @example\n   * const query = client.query('myQuery', (root) => {\n   *   root.add('cat', (cat) => {\n   *    cat.add('name');\n   *   });\n   * });\n   *\n   * @param {String} [name] A name for the query.\n   * @param {VariableDefinition[]} [variables] A list of variables in the query. See {@link Client#variable}.\n   * @param {Function} selectionSetCallback The query builder callback.\n   *   A {@link SelectionSet} is created using this callback.\n   * @return {Query} A GraphQL query.\n   */\n  query(...args) {\n    return new Query(this.typeBundle, ...args);\n  }\n\n  /**\n   * Creates a GraphQL mutation.\n   *\n   * @example\n   * const input = client.variable('input', 'CatCreateInput!');\n   *\n   * const mutation = client.mutation('myMutation', [input], (root) => {\n   *   root.add('catCreate', {args: {input}}, (catCreate) => {\n   *     catCreate.add('cat', (cat) => {\n   *       cat.add('name');\n   *     });\n   *   });\n   * });\n   *\n   * @param {String} [name] A name for the mutation.\n   * @param {VariableDefinition[]} [variables] A list of variables in the mutation. See {@link Client#variable}.\n   * @param {Function} selectionSetCallback The mutation builder callback.\n   *   A {@link SelectionSet} is created using this callback.\n   * @return {Mutation} A GraphQL mutation.\n   */\n  mutation(...args) {\n    return new Mutation(this.typeBundle, ...args);\n  }\n\n  /**\n   * Sends a GraphQL operation (query or mutation) or a document.\n   *\n   * @example\n   * client.send(query, [{id: '12345'}]).then((result) => {\n   *   // Do something with the returned result\n   *   console.log(result);\n   * });\n   *\n   * @param {(Query|Mutation|Document)} operationOrDocument The operation or document to send.\n   * @param {Object[]} [variableValues] The values for variables in the operation or document.\n   * @param {Object} [otherProperties] Other properties to send with the query. For example, a custom operation name.\n   * @return {Promise.<Object>} A promise resolving to an object containing the response data.\n   */\n  send(operationOrDocument, variableValues = null, otherProperties = null) {\n    const graphQLParams = {query: operationOrDocument.toString()};\n\n    if (variableValues) {\n      graphQLParams.variables = variableValues;\n    }\n\n    Object.assign(graphQLParams, otherProperties);\n\n    let operation;\n\n    if (Operation.prototype.isPrototypeOf(operationOrDocument)) {\n      operation = operationOrDocument;\n    } else {\n      const document = operationOrDocument;\n\n      if (document.operations.length === 1) {\n        operation = document.operations[0];\n      } else if (otherProperties.operationName) {\n        operation = document.operations.find((documentOperation) => documentOperation.name === otherProperties.operationName);\n      } else {\n        throw new Error(`\n          A document must contain exactly one operation, or an operationName\n          must be specified. Example:\n\n            client.send(document, null, {operationName: 'myFancyQuery'});\n        `);\n      }\n    }\n\n    return this.fetcher(graphQLParams).then((response) => {\n      if (response.data) {\n        response.model = decode(operation, response.data, {classRegistry: this.classRegistry});\n      }\n\n      return response;\n    });\n  }\n\n  /**\n   * Fetches the next page of a paginated node or array of nodes.\n   *\n   * @example\n   * client.fetchNextPage(node, {first: 10}).then((result) => {\n   *   // Do something with the next page\n   *   console.log(result);\n   * });\n   *\n   * @param {(GraphModel|GraphModel[])} nodeOrNodes The node or list of nodes on which to fetch the next page.\n   * @param {Object} [options] Options object containing:\n   *   @param {Integer} [options.first] The number of nodes to query on the next page. Defaults to the page size of the previous query.\n   * @return {Promise.<GraphModel[]>} A promise resolving with the next page of {@link GraphModel}s.\n   */\n  fetchNextPage(nodeOrNodes, options) {\n    let node;\n\n    if (Array.isArray(nodeOrNodes)) {\n      node = nodeOrNodes[nodeOrNodes.length - 1];\n    } else {\n      node = nodeOrNodes;\n    }\n\n    const [query, path] = node.nextPageQueryAndPath();\n\n    return this.send(query, options).then((response) => {\n      response.model = path.reduce((object, key) => {\n        return object[key];\n      }, response.model);\n\n      return response;\n    });\n  }\n\n  /**\n   * Fetches all subsequent pages of a paginated array of nodes.\n   *\n   * @example\n   * client.fetchAllPages(nodes, {pageSize: 20}).then((result) => {\n   *   // Do something with all the models\n   *   console.log(result);\n   * });\n   *\n   * @param {GraphModel[]} paginatedModels The list of nodes on which to fetch all pages.\n   * @param {Object} options Options object containing:\n   *   @param {Integer} options.pageSize The number of nodes to query on each page.\n   * @return {Promise.<GraphModel[]>} A promise resolving with all pages of {@link GraphModel}s, including the original list.\n   */\n  fetchAllPages(paginatedModels, {pageSize}) {\n    if (hasNextPage(paginatedModels)) {\n      return this.fetchNextPage(paginatedModels, {first: pageSize}).then(({model}) => {\n        const pages = paginatedModels.concat(model);\n\n        return this.fetchAllPages(pages, {pageSize});\n      });\n    }\n\n    return Promise.resolve(paginatedModels);\n  }\n\n  /**\n   * Refetches a {@link GraphModel} whose type implements `Node`.\n   *\n   * @example\n   * client.refetch(node).then((result) => {\n   *   // Do something with the refetched node\n   *   console.log(result);\n   * });\n   *\n   * @param {GraphModel} nodeType A {@link GraphModel} whose type implements `Node`.\n   * @return {Promise.<GraphModel>} The refetched {@link GraphModel}.\n   */\n  refetch(nodeType) {\n    if (!nodeType) {\n      throw new Error('\\'client#refetch\\' must be called with a non-null instance of a Node.');\n    } else if (!nodeType.type.implementsNode) {\n      throw new Error(`'client#refetch' must be called with a type that implements Node. Received ${nodeType.type.name}.`);\n    }\n\n    return this.send(nodeType.refetchQuery()).then(({model}) => model.node);\n  }\n\n  /**\n   * Creates a variable to be used in a {@link Query} or {@link Mutation}.\n   *\n   * @example\n   * const idVariable = client.variable('id', 'ID!', '12345');\n   *\n   * @param {String} name The name of the variable.\n   * @param {String} type The GraphQL type of the variable.\n   * @param {*} [defaultValue] The default value of the variable.\n   * @return {VariableDefinition} A variable object that can be used in a {@link Query} or {@link Mutation}.\n   */\n  variable(name, type, defaultValue) {\n    return variableFunction(name, type, defaultValue);\n  }\n\n  /**\n   * Creates an enum to be used in a {@link Query} or {@link Mutation}.\n   *\n   * @example\n   * const titleEnum = client.enum('TITLE');\n   *\n   * @param {String} key The key of the enum.\n   * @return {Enum} An enum object that can be used in a {@link Query} or {@link Mutation}.\n   */\n  enum(key) {\n    return enumFunction(key);\n  }\n}\n","import Client from './client';\nimport {resetTracker, startTracking, pauseTracking, trackedTypes, trackedFields, printTypes} from './track-type-dependency';\n\nexport {default as GraphModel} from './graph-model';\nexport {default as ClassRegistry} from './class-registry';\nexport {default as decode} from './decode';\n\nObject.assign(Client, {\n  resetTracker,\n  startTracking,\n  pauseTracking,\n  trackedTypes,\n  trackedFields,\n  printTypes\n});\n\nexport default Client;\n"],"names":["join","fields","isObject","value","Boolean","Object","prototype","toString","call","valueOf","deepFreezeCopyExcept","predicate","structure","freeze","keys","reduce","copy","key","Array","isArray","map","item","schemaForType","typeBundle","typeName","type","types","Error","VariableDefinition","name","defaultValue","defaultValueString","formatInputValue","isVariable","variable","Enum","Scalar","isPrototypeOf","toInputValueString","String","JSON","stringify","formatObject","openChar","closeChar","argPairs","formatArgs","args","length","tracking","trackTypeDependency","trackFieldDependency","fieldName","resetTracker","startTracking","pauseTracking","trackedTypes","sort","printTypes","log","trackedFields","getOwnPropertyNames","acc","Tracker","parseFieldCreationArgs","creationArgs","callback","noop","options","selectionSet","SelectionSet","emptyArgs","Field","alias","responseKey","aliasPrefix","Spread","InlineFragment","FragmentSpread","fragmentDefinition","FragmentDefinition","spread","selectionsHaveIdField","selections","some","fieldOrFragment","typeSchema","implementsNode","selectionsHaveTypenameField","indexSelectionsByResponseKey","assignOrPush","obj","push","unfrozenObject","selection","responseKeys","selectionsByResponseKey","forEach","builderFunction","SelectionSetBuilder","unshift","kind","field","selectionOrFieldName","rest","hasSelectionWithResponseKey","parsedArgs","fieldBaseTypes","fieldBaseType","builderFunctionOrSelectionSet","add","connection","pageInfo","edges","addField","fieldTypeCb","inlineFragmentOn","fragmentSpread","parseArgs","variables","selectionSetCallback","VariableDefinitions","variableDefinitions","Operation","operationType","queryType","mutationType","nameString","Query","Mutation","isAnonymous","operation","hasAnonymousOperations","operations","hasDuplicateOperationNames","names","hasDuplicates","index","indexOf","extractOperation","isInvalidOperationCombination","fragmentNameIsNotUnique","existingDefinitions","definition","Document","definitions","concat","addOperation","onType","fragmentDefinitions","fragment","filter","GraphModel","attrs","descriptor","defineProperty","ClassRegistry","classStore","constructor","isValue","arg","isNodeContext","context","isConnection","endsWith","nearestNode","parent","contextsFromRoot","contextsFromNearestNode","addNextFieldTo","currentSelection","contextChain","cursor","path","nextContext","shift","newSelection","edgesField","find","nodeField","first","assign","after","addConnection","nextPageQueryAndPath","nearestNodeContext","nodeType","nodeId","responseData","id","query","root","node","addInlineFragmentOn","slice","hasNextPage","edge","hasPreviousPage","transformConnections","hasOwnProperty","DecodingContext","nestedSelections","nextSelection","contextForObjectProperty","decodeArrayItems","transformers","decodeContext","contextForArrayItem","decodeObjectValues","runTransformers","transformer","generateRefetchQueries","refetchQuery","transformPojosToClassesWithRegistry","classRegistry","transformPojosToClasses","Klass","classForType","transformScalars","recordTypeInformation","__typename","defaultTransformers","decode","httpFetcher","url","fetcher","graphQLParams","fetch","headers","then","response","json","paginatedModels","Client","fetcherOptions","registry","operationOrDocument","variableValues","otherProperties","document","operationName","documentOperation","data","model","nodeOrNodes","send","object","pageSize","fetchNextPage","pages","fetchAllPages","Promise","resolve","variableFunction","enumFunction"],"mappings":"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"}